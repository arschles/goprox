// Code generated by protoc-gen-go.
// source: goproxd.proto
// DO NOT EDIT!

/*
Package gen is a generated protocol buffer package.

It is generated from these files:
	goproxd.proto

It has these top-level messages:
	PackageMeta
	PackageExistsResponse
	FullPackage
	Empty
*/
package gen

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PackageMeta struct {
	Name    string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=Version,json=version" json:"Version,omitempty"`
}

func (m *PackageMeta) Reset()                    { *m = PackageMeta{} }
func (m *PackageMeta) String() string            { return proto.CompactTextString(m) }
func (*PackageMeta) ProtoMessage()               {}
func (*PackageMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PackageExistsResponse struct {
	Exists bool         `protobuf:"varint,1,opt,name=Exists,json=exists" json:"Exists,omitempty"`
	Meta   *PackageMeta `protobuf:"bytes,2,opt,name=Meta,json=meta" json:"Meta,omitempty"`
}

func (m *PackageExistsResponse) Reset()                    { *m = PackageExistsResponse{} }
func (m *PackageExistsResponse) String() string            { return proto.CompactTextString(m) }
func (*PackageExistsResponse) ProtoMessage()               {}
func (*PackageExistsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PackageExistsResponse) GetMeta() *PackageMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type FullPackage struct {
	Metadata *PackageMeta `protobuf:"bytes,1,opt,name=Metadata,json=metadata" json:"Metadata,omitempty"`
	// the entire package tarball
	Payload []byte `protobuf:"bytes,2,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *FullPackage) Reset()                    { *m = FullPackage{} }
func (m *FullPackage) String() string            { return proto.CompactTextString(m) }
func (*FullPackage) ProtoMessage()               {}
func (*FullPackage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FullPackage) GetMetadata() *PackageMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*PackageMeta)(nil), "goproxd.PackageMeta")
	proto.RegisterType((*PackageExistsResponse)(nil), "goproxd.PackageExistsResponse")
	proto.RegisterType((*FullPackage)(nil), "goproxd.FullPackage")
	proto.RegisterType((*Empty)(nil), "goproxd.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for GoProxD service

type GoProxDClient interface {
	GoGet(ctx context.Context, in *PackageMeta, opts ...grpc.CallOption) (*FullPackage, error)
	AdminAddPackage(ctx context.Context, in *FullPackage, opts ...grpc.CallOption) (*Empty, error)
	PackageExists(ctx context.Context, in *PackageMeta, opts ...grpc.CallOption) (*PackageExistsResponse, error)
}

type goProxDClient struct {
	cc *grpc.ClientConn
}

func NewGoProxDClient(cc *grpc.ClientConn) GoProxDClient {
	return &goProxDClient{cc}
}

func (c *goProxDClient) GoGet(ctx context.Context, in *PackageMeta, opts ...grpc.CallOption) (*FullPackage, error) {
	out := new(FullPackage)
	err := grpc.Invoke(ctx, "/goproxd.GoProxD/GoGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goProxDClient) AdminAddPackage(ctx context.Context, in *FullPackage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/goproxd.GoProxD/AdminAddPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goProxDClient) PackageExists(ctx context.Context, in *PackageMeta, opts ...grpc.CallOption) (*PackageExistsResponse, error) {
	out := new(PackageExistsResponse)
	err := grpc.Invoke(ctx, "/goproxd.GoProxD/PackageExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoProxD service

type GoProxDServer interface {
	GoGet(context.Context, *PackageMeta) (*FullPackage, error)
	AdminAddPackage(context.Context, *FullPackage) (*Empty, error)
	PackageExists(context.Context, *PackageMeta) (*PackageExistsResponse, error)
}

func RegisterGoProxDServer(s *grpc.Server, srv GoProxDServer) {
	s.RegisterService(&_GoProxD_serviceDesc, srv)
}

func _GoProxD_GoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoProxDServer).GoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goproxd.GoProxD/GoGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoProxDServer).GoGet(ctx, req.(*PackageMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoProxD_AdminAddPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoProxDServer).AdminAddPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goproxd.GoProxD/AdminAddPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoProxDServer).AdminAddPackage(ctx, req.(*FullPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoProxD_PackageExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoProxDServer).PackageExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goproxd.GoProxD/PackageExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoProxDServer).PackageExists(ctx, req.(*PackageMeta))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoProxD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goproxd.GoProxD",
	HandlerType: (*GoProxDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoGet",
			Handler:    _GoProxD_GoGet_Handler,
		},
		{
			MethodName: "AdminAddPackage",
			Handler:    _GoProxD_AdminAddPackage_Handler,
		},
		{
			MethodName: "PackageExists",
			Handler:    _GoProxD_PackageExists_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x51, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0x5e, 0xb5, 0x6b, 0xea, 0xab, 0x53, 0x78, 0xa8, 0x94, 0x1d, 0x44, 0x7a, 0xda, 0x69, 0xc8,
	0xc4, 0x83, 0x78, 0x9a, 0x38, 0x7b, 0x52, 0x4a, 0x0f, 0x82, 0xde, 0xa2, 0x09, 0xa5, 0xd8, 0x24,
	0x65, 0x89, 0xb2, 0xfd, 0x7f, 0xfe, 0x61, 0xa6, 0x69, 0xa7, 0x9b, 0x4c, 0x2f, 0xa1, 0xdf, 0xf7,
	0xde, 0xf7, 0x83, 0x57, 0x18, 0x14, 0xaa, 0x9e, 0xab, 0x05, 0x1b, 0xdb, 0xd7, 0x28, 0x24, 0x1d,
	0x4c, 0xae, 0x21, 0xca, 0xe8, 0xeb, 0x1b, 0x2d, 0xf8, 0x3d, 0x37, 0x14, 0x11, 0xfc, 0x07, 0x2a,
	0x78, 0xec, 0x9d, 0x79, 0xa3, 0xbd, 0xdc, 0x97, 0xf6, 0x1b, 0x63, 0x20, 0x8f, 0x7c, 0xae, 0x4b,
	0x25, 0xe3, 0x1d, 0x47, 0x93, 0x8f, 0x16, 0x26, 0x4f, 0x70, 0xdc, 0x89, 0x67, 0x8b, 0x52, 0x1b,
	0x9d, 0x73, 0x5d, 0x2b, 0xa9, 0x39, 0x9e, 0x40, 0xd0, 0x32, 0xce, 0x28, 0xcc, 0x03, 0xee, 0x10,
	0x8e, 0xc0, 0x6f, 0x62, 0x9c, 0x4f, 0x34, 0x39, 0x1a, 0xaf, 0x4a, 0xad, 0x55, 0xc8, 0x7d, 0x61,
	0x5f, 0x6b, 0x1d, 0xdd, 0xbd, 0x57, 0x55, 0x37, 0xc0, 0x73, 0x08, 0x9b, 0x21, 0xa3, 0x56, 0xec,
	0xfd, 0x23, 0x0e, 0x45, 0xb7, 0xd5, 0xb4, 0xce, 0xe8, 0xb2, 0x52, 0x94, 0xb9, 0xb4, 0xfd, 0x9c,
	0xd4, 0x2d, 0x4c, 0x08, 0xf4, 0x67, 0xa2, 0x36, 0xcb, 0xc9, 0xa7, 0x07, 0x24, 0x55, 0x99, 0x35,
	0xb9, 0xc5, 0x4b, 0xe8, 0xa7, 0x2a, 0xe5, 0x06, 0xb7, 0xfa, 0x0e, 0x7f, 0xd8, 0xb5, 0x56, 0x49,
	0x0f, 0xaf, 0xe0, 0x70, 0xca, 0x44, 0x29, 0xa7, 0x8c, 0xad, 0xaa, 0x6e, 0x5d, 0x1d, 0x1e, 0x7c,
	0xb3, 0x2e, 0xdb, 0x4a, 0x53, 0x18, 0x6c, 0x1c, 0xef, 0x8f, 0xe4, 0xd3, 0xdf, 0xec, 0xe6, 0xa9,
	0x93, 0xde, 0x4d, 0xff, 0x79, 0xb7, 0xe0, 0xf2, 0x25, 0x70, 0x7f, 0xf6, 0xe2, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x3a, 0x7a, 0x89, 0x90, 0xea, 0x01, 0x00, 0x00,
}
